#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

sem_t semaphore;

void* thread_function(void* arg) {
    sem_wait(&semaphore); // Acquire the semaphore
    printf("Semaphore acquired by thread!\n");
    // Perform critical section
    sem_post(&semaphore); // Release the semaphore
    printf("Semaphore released by thread!\n");
    pthread_exit(NULL);
}

int main() {
    pthread_t thread;
    sem_init(&semaphore, 0, 1); // Initialize the semaphore to 1 (binary)
    
    pthread_create(&thread, NULL, thread_function, NULL);
    
    sem_wait(&semaphore); // Acquire the semaphore
    printf("Semaphore acquired by main thread!\n");
    // Perform critical section
    sem_post(&semaphore); // Release the semaphore
    printf("Semaphore released by main thread!\n");
    
    pthread_join(thread, NULL);
    sem_destroy(&semaphore);
    
    return 0;
}
